#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Controller.h"
#include "Passenger.h"

#include "Tipo.h"
#inlcude "Estado.h"
#define TAM_TIPO 3
#define TAM_ESTADO 4

/****************************************************
    Menu:
     1. Cargar los datos de los pasajeros desde el archivo data.csv (modo texto).
     2. Cargar los datos de los pasajeros desde el archivo data.csv (modo binario).
     3. Alta de pasajero
     4. Modificar datos de pasajero
     5. Baja de pasajero
     6. Listar pasajeros
     7. Ordenar pasajeros
     8. Guardar los datos de los pasajeros en el archivo data.csv (modo texto).
     9. Guardar los datos de los pasajeros en el archivo data.csv (modo binario).
    10. Salir
*****************************************************/




typedef struct{
	int id;
	char descripcion[20];
}eEstado;




int hardCodearEstados(eEstado estados[],int tamE);
int obtenerIdPorDescripcionEstado(eEstado estados[],int tamE, char* descripcionEstado);

void verificarNULL(void* funcion);
int main()
{
    int option = 0;
    LinkedList* listaPasajeros = ll_newLinkedList();
    verificarNULL(listaPasajeros);
	eTipo tipos[TAM_TIPO];
	hardCodearTipos(tipos, TAM_TIPO);

	eEstado estados[TAM_ESTADO];
	hardCodearEstados(estados, TAM_ESTADO);
	printf("%d\n", obtenerIdPorDescripcionEstado(estados, TAM_ESTADO,"En Vuelo"));
	system("pause");
    do{
        switch(option)
        {
            case 1:
                controller_loadFromText("data.csv",listaPasajeros);
                break;
        }
    }while(0);

    return 0;
}


int hardCodearEstados(eEstado estados[],int tamE){
	int todoOk=-1;
	int id=5000;
	char descripcion[4][20]={"Aterrizado","En horario","Demorado", "En Vuelo"};
	if(estados!=NULL && tamE>0){
		for(int i =0; i<tamE;i++){
			estados[i].id=id;
			strcpy(estados[i].descripcion, descripcion[i]);
			id++;
		}
		todoOk=0;
	}
	return todoOk;
}
int obtenerIdPorDescripcionEstado(eEstado estados[],int tamE, char* descripcionEstado){
	int todoOk=-1;
	if(estados!=NULL && tamE>0){
		for(int i=0; i<tamE; i++){
			if(strcmp(estados[i].descripcion,descripcionEstado)==0){
				todoOk=estados[i].id;
				break;
			}
		}
	}
	return todoOk;
}
void verificarNULL(void* puntero){
	if(puntero==NULL){
		printf("Hubo un error al crear un espacio en la momoria dinamica.\n");
		system("pause");
		exit(1);
	}
}
